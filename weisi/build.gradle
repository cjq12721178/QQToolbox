apply plugin: 'com.android.library'

android {
    compileSdkVersion 24
    buildToolsVersion '25.0.0'

    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 24
        versionCode 58
        versionName "2.1.6"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //打包后应用名称

    libraryVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            def fileName
            if (outputFile != null && outputFile.name.endsWith('.aar')) {
                if (variant.buildType.name == 'release') {
                    fileName = "com.cjq.lib.weisi-${defaultConfig.versionName}.aar"
                } else if (variant.buildType.name == 'debug') {
                    fileName = "debug-${defaultConfig.versionName}.aar"
                }
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }
    externalNativeBuild {
        cmake {
            path 'CMakeLists.txt'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:24.2.1'
    testCompile 'junit:junit:4.12'
    compile project(path: ':qbox')
}

task copyAar(type: Copy) {
    from "${buildDir}/outputs/aar/"
    into "${projectDir}"
    exclude 'debug*'
    include "*${android.defaultConfig.versionName}.aar"
    println "weisi back-up completed"
}

afterEvaluate {
    tasks.matching {
        // 以process开头以ReleaseJavaRes或DebugJavaRes结尾的task
        it.name == "assembleRelease" &&
                it.project.name == "weisi"
    }.each { task ->
        //task.dependsOn(testAssembleRelease)  // 任务依赖：执行task之前需要执行dependsOn指定的任务
        task.doLast {
            tasks.copyAar.execute()
        }
    }
}