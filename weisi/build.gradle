apply plugin: 'com.android.library'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: 'maven'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 28
        versionCode 162
        versionName "7.5.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //打包后应用名称

    libraryVariants.all { variant ->
        variant.outputs.all { output ->
            def fileName
            if (outputFileName != null && outputFileName.endsWith('.aar')) {
                if (variant.buildType.name == 'release') {
                    fileName = "com.cjq.lib.weisi-${defaultConfig.versionName}.aar"
                } else if (variant.buildType.name == 'debug') {
                    fileName = "debug-${defaultConfig.versionName}.aar"
                }
                outputFileName = fileName
            }
        }
    }
    externalNativeBuild {
        cmake {
            path 'CMakeLists.txt'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'io.apisense:rhino-android:1.0'
    testImplementation 'junit:junit:4.12'
    implementation 'com.android.support:support-annotations:28.0.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

//task copyAar(type: Copy) {
//    from "${buildDir}/outputs/aar/"
//    into "${projectDir}"
//    exclude 'debug*'
//    include "*${android.defaultConfig.versionName}.aar"
//    println "weisi back-up completed"
//}

task copyAar << {
    ["${projectDir}", "${rootDir}/app/libs"].each { dest ->
        if (!dest.contains("weisi")) {
            new File(dest).listFiles().each { file ->
                if (file.name.startsWith("com.cjq.lib.weisi") && file.name.endsWith(".aar")) {
                    file.delete()
                }
            }
        }
        copy {
            from "${buildDir}/outputs/aar/"
            into dest
            exclude "debug*"
            include "*${android.defaultConfig.versionName}.aar"
            //rename "wsb.jar", "com.wsn.lib.wsb-${versionName}.jar"
        }
    }
    println "weisi back-up completed"
}

uploadArchives {
    repositories.mavenDeployer {
        // 本地仓库路径D:\WorkSpace
//        repository(url: uri('../repository'))
        repository(url: 'file://D://cjq/repository')
        // 唯一标识
        pom.groupId = "com.cjq.lib"
        // 项目名称
        pom.artifactId = "weisi"
        // 版本号
        pom.version = android.defaultConfig.versionName
    }
}

afterEvaluate {
    tasks.matching {
        // 以process开头以ReleaseJavaRes或DebugJavaRes结尾的task
        it.name == "assembleRelease" &&
                it.project.name == "weisi"
    }.each { task ->
        //task.dependsOn(testAssembleRelease)  // 任务依赖：执行task之前需要执行dependsOn指定的任务
        task.doLast {
            tasks.copyAar.execute()
        }
    }
}

repositories {
    mavenCentral()
}